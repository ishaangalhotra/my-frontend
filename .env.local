// ==========================================
// PRODUCTION-READY FRONTEND CONFIGURATION
// ==========================================

// 1. Environment Configuration (.env.local)
/*
NEXT_PUBLIC_API_BASE_URL=https://quicklocal-backend.onrender.com
NEXT_PUBLIC_FRONTEND_URL=https://my-frontend-ifyr.vercel.app
NEXT_PUBLIC_APP_VERSION=1.0.0
NODE_ENV=production
NEXT_PUBLIC_DEBUG_MODE=false
*/

// 2. API Configuration (config/api.config.js)
export const API_CONFIG = {
  BASE_URL: process.env.NEXT_PUBLIC_API_BASE_URL || 'https://quicklocal-backend.onrender.com',
  FRONTEND_URL: process.env.NEXT_PUBLIC_FRONTEND_URL || 'https://my-frontend-ifyr.vercel.app',
  VERSION: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',
  DEBUG: process.env.NEXT_PUBLIC_DEBUG_MODE === 'true',
  TIMEOUT: 30000, // 30 seconds
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000, // 1 second
};

// 3. Enhanced API Client (lib/api.js)
class ApiClient {
  constructor(config = API_CONFIG) {
    this.baseURL = config.BASE_URL;
    this.frontendURL = config.FRONTEND_URL;
    this.timeout = config.TIMEOUT;
    this.retryAttempts = config.RETRY_ATTEMPTS;
    this.retryDelay = config.RETRY_DELAY;
    this.debug = config.DEBUG;
  }

  // Token management
  getAuthToken() {
    if (typeof window === 'undefined') return null;
    
    return (
      localStorage.getItem('authToken') || 
      sessionStorage.getItem('authToken') ||
      document.cookie.split(';').find(cookie => 
        cookie.trim().startsWith('authToken=')
      )?.split('=')[1]
    );
  }

  setAuthToken(token, remember = false) {
    if (typeof window === 'undefined') return;
    
    if (remember) {
      localStorage.setItem('authToken', token);
    } else {
      sessionStorage.setItem('authToken', token);
    }
  }

  removeAuthToken() {
    if (typeof window === 'undefined') return;
    
    localStorage.removeItem('authToken');
    sessionStorage.removeItem('authToken');
  }

  // Request interceptor
  createRequestConfig(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const token = this.getAuthToken();
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        'Origin': this.frontendURL,
        'X-Requested-With': 'XMLHttpRequest',
        'X-Client-Version': API_CONFIG.VERSION,
        ...options.headers,
      },
      credentials: 'include',
      signal: AbortSignal.timeout(this.timeout),
      ...options,
    };

    // Add authorization header
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Remove Content-Type for FormData
    if (options.body instanceof FormData) {
      delete config.headers['Content-Type'];
    }

    return { url, config };
  }

  // Enhanced logging
  log(type, message, data = null) {
    if (!this.debug && process.env.NODE_ENV === 'production') return;
    
    const timestamp = new Date().toISOString();
    const prefix = {
      request: 'üîÑ',
      response: 'üì•',
      error: '‚ùå',
      success: '‚úÖ',
      retry: 'üîÑ'
    }[type] || 'üìù';
    
    console.log(`${prefix} [${timestamp}] ${message}`);
    if (data) console.log(data);
  }

  // Retry mechanism with exponential backoff
  async withRetry(requestFn, retries = this.retryAttempts) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        return await requestFn();
      } catch (error) {
        this.log('retry', `Attempt ${attempt}/${retries} failed: ${error.message}`);
        
        if (attempt === retries) throw error;
        
        // Exponential backoff: 1s, 2s, 4s, etc.
        const delay = this.retryDelay * Math.pow(2, attempt - 1);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  // Main request method
  async request(endpoint, options = {}) {
    const { url, config } = this.createRequestConfig(endpoint, options);
    
    this.log('request', `${config.method || 'GET'} ${url}`, {
      headers: config.headers,
      body: config.body instanceof FormData ? '[FormData]' : config.body
    });

    try {
      const response = await this.withRetry(async () => {
        const res = await fetch(url, config);
        
        if (!res.ok) {
          const errorText = await res.text();
          let errorData;
          
          try {
            errorData = JSON.parse(errorText);
          } catch {
            errorData = { error: errorText, status: res.status };
          }
          
          // Handle specific error cases
          if (res.status === 401) {
            this.removeAuthToken();
            window.dispatchEvent(new CustomEvent('auth:logout'));
          }
          
          const error = new Error(errorData.error || res.statusText);
          error.status = res.status;
          error.data = errorData;
          throw error;
        }
        
        return res;
      });

      // Handle different content types
      const contentType = response.headers.get('content-type');
      let data;
      
      if (contentType?.includes('application/json')) {
        data = await response.json();
      } else if (contentType?.includes('text/')) {
        data = await response.text();
      } else {
        data = await response.blob();
      }

      this.log('success', `${response.status} ${response.statusText}`, data);
      return data;

    } catch (error) {
      this.log('error', `Request failed: ${error.message}`, {
        status: error.status,
        data: error.data
      });
      throw error;
    }
  }

  // HTTP methods
  get(endpoint, options = {}) {
    return this.request(endpoint, { ...options, method: 'GET' });
  }

  post(endpoint, data, options = {}) {
    const body = data instanceof FormData ? data : JSON.stringify(data);
    return this.request(endpoint, { ...options, method: 'POST', body });
  }

  put(endpoint, data, options = {}) {
    const body = data instanceof FormData ? data : JSON.stringify(data);
    return this.request(endpoint, { ...options, method: 'PUT', body });
  }

  patch(endpoint, data, options = {}) {
    const body = data instanceof FormData ? data : JSON.stringify(data);
    return this.request(endpoint, { ...options, method: 'PATCH', body });
  }

  delete(endpoint, options = {}) {
    return this.request(endpoint, { ...options, method: 'DELETE' });
  }

  // Health check
  async healthCheck() {
    try {
      const response = await this.get('/health');
      return { healthy: true, data: response };
    } catch (error) {
      return { healthy: false, error: error.message };
    }
  }
}

// Export singleton instance
export const api = new ApiClient();

// 4. Enhanced Seller Service (services/sellerService.js)
import { api } from '../lib/api';

class SellerService {
  constructor(apiClient) {
    this.api = apiClient;
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
  }

  // Cache management
  getCachedData(key) {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    if (Date.now() - cached.timestamp > this.cacheTimeout) {
      this.cache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  setCachedData(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  clearCache(pattern) {
    if (pattern) {
      for (const key of this.cache.keys()) {
        if (key.includes(pattern)) {
          this.cache.delete(key);
        }
      }
    } else {
      this.cache.clear();
    }
  }

  // Connection test with timeout
  async testConnection() {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);
      
      const response = await fetch(`${this.api.baseURL}/`, {
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      const data = await response.json();
      console.log('‚úÖ Backend connection successful:', data.message);
      return { connected: true, data };
      
    } catch (error) {
      console.error('‚ùå Backend connection failed:', error.message);
      return { connected: false, error: error.message };
    }
  }

  // Get products with caching
  async getProducts(useCache = true) {
    const cacheKey = 'seller_products';
    
    if (useCache) {
      const cached = this.getCachedData(cacheKey);
      if (cached) return cached;
    }
    
    try {
      const response = await this.api.get('/api/seller/products');
      const products = response.products || response.data || response;
      
      if (useCache) {
        this.setCachedData(cacheKey, products);
      }
      
      return products;
    } catch (error) {
      throw new Error(`Failed to load products: ${error.message}`);
    }
  }

  // Upload product with progress tracking
  async uploadProduct(productData, onProgress) {
    try {
      this.clearCache('seller_products');
      
      const formData = new FormData();
      
      if (productData instanceof FormData) {
        return this.api.post('/api/seller/products', productData);
      }
      
      // Convert object to FormData
      Object.keys(productData).forEach(key => {
        const value = productData[key];
        if (value instanceof File) {
          formData.append(key, value);
        } else if (Array.isArray(value)) {
          value.forEach(item => formData.append(key, item));
        } else if (value !== null && value !== undefined) {
          formData.append(key, JSON.stringify(value));
        }
      });

      const response = await this.api.post('/api/seller/products', formData);
      return response;
      
    } catch (error) {
      throw new Error(`Failed to upload product: ${error.message}`);
    }
  }

  // Update product
  async updateProduct(productId, data) {
    if (!productId) throw new Error('Product ID is required');
    
    try {
      this.clearCache('seller_products');
      const response = await this.api.put(`/api/seller/products/${productId}`, data);
      return response;
    } catch (error) {
      throw new Error(`Failed to update product: ${error.message}`);
    }
  }

  // Delete product with confirmation
  async deleteProduct(productId, confirm = false) {
    if (!productId) throw new Error('Product ID is required');
    if (!confirm) throw new Error('Deletion must be confirmed');
    
    try {
      this.clearCache('seller_products');
      const response = await this.api.delete(`/api/seller/products/${productId}`);
      return response;
    } catch (error) {
      throw new Error(`Failed to delete product: ${error.message}`);
    }
  }

  // Get dashboard data
  async getDashboard() {
    const cacheKey = 'seller_dashboard';
    const cached = this.getCachedData(cacheKey);
    
    if (cached) return cached;
    
    try {
      const response = await this.api.get('/api/seller/dashboard');
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      throw new Error(`Failed to load dashboard: ${error.message}`);
    }
  }

  // Batch operations
  async bulkUpdateProducts(updates) {
    try {
      this.clearCache('seller_products');
      return this.api.patch('/api/seller/products/bulk', { updates });
    } catch (error) {
      throw new Error(`Bulk update failed: ${error.message}`);
    }
  }
}

export const sellerService = new SellerService(api);

// 5. Enhanced React Hook (hooks/useSellerProducts.js)
import { useState, useEffect, useCallback, useRef } from 'react';
import { sellerService } from '../services/sellerService';

export const useSellerProducts = (options = {}) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(null);
  
  const mountedRef = useRef(true);
  const {
    autoRefresh = false,
    refreshInterval = 30000,
    useCache = true
  } = options;

  const loadProducts = useCallback(async (showLoading = true) => {
    if (!mountedRef.current) return;
    
    try {
      if (showLoading) setLoading(true);
      setError(null);

      // Test connection first
      const connection = await sellerService.testConnection();
      if (!connection.connected) {
        throw new Error(`Backend unavailable: ${connection.error}`);
      }
      
      const data = await sellerService.getProducts(useCache);
      
      if (!mountedRef.current) return;
      
      setProducts(Array.isArray(data) ? data : []);
      setLastUpdated(new Date());
      
    } catch (err) {
      if (!mountedRef.current) return;
      
      console.error('Failed to load products:', err);
      setError(err.message);
    } finally {
      if (mountedRef.current) {
        setLoading(false);
      }
    }
  }, [useCache]);

  // Initial load
  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  // Auto refresh
  useEffect(() => {
    if (!autoRefresh) return;
    
    const interval = setInterval(() => {
      loadProducts(false); // Silent refresh
    }, refreshInterval);

    return () => clearInterval(interval);
  }, [autoRefresh, refreshInterval, loadProducts]);

  // Cleanup
  useEffect(() => {
    return () => {
      mountedRef.current = false;
    };
  }, []);

  const refetch = useCallback(() => {
    sellerService.clearCache('seller_products');
    return loadProducts();
  }, [loadProducts]);

  const addProduct = useCallback((newProduct) => {
    setProducts(prev => [newProduct, ...prev]);
    setLastUpdated(new Date());
  }, []);

  const updateProduct = useCallback((productId, updatedData) => {
    setProducts(prev => prev.map(product => 
      product._id === productId ? { ...product, ...updatedData } : product
    ));
    setLastUpdated(new Date());
  }, []);

  const removeProduct = useCallback((productId) => {
    setProducts(prev => prev.filter(product => product._id !== productId));
    setLastUpdated(new Date());
  }, []);

  return {
    products,
    loading,
    error,
    lastUpdated,
    refetch,
    addProduct,
    updateProduct,
    removeProduct,
    // Computed values
    totalProducts: products.length,
    hasProducts: products.length > 0,
    isEmpty: !loading && products.length === 0
  };
};

// 6. Production-Ready React Component (components/SellerProducts.jsx)
import React, { useState, useMemo } from 'react';
import { useSellerProducts } from '../hooks/useSellerProducts';

const ITEMS_PER_PAGE = 12;

export default function SellerProducts() {
  const { 
    products, 
    loading, 
    error, 
    lastUpdated,
    refetch,
    hasProducts,
    isEmpty 
  } = useSellerProducts({
    autoRefresh: true,
    refreshInterval: 30000
  });
  
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  // Filtered and paginated products
  const { filteredProducts, paginatedProducts, totalPages } = useMemo(() => {
    let filtered = products;
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(product => 
        product.name?.toLowerCase().includes(query) ||
        product.description?.toLowerCase().includes(query) ||
        product.category?.toLowerCase().includes(query)
      );
    }
    
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(product => 
        product.category === selectedCategory
      );
    }
    
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const paginated = filtered.slice(startIndex, startIndex + ITEMS_PER_PAGE);
    
    return {
      filteredProducts: filtered,
      paginatedProducts: paginated,
      totalPages: Math.ceil(filtered.length / ITEMS_PER_PAGE)
    };
  }, [products, searchQuery, selectedCategory, currentPage]);

  const categories = useMemo(() => {
    const cats = new Set(products.map(p => p.category).filter(Boolean));
    return ['all', ...Array.from(cats)];
  }, [products]);

  if (loading) {
    return <ProductsSkeleton />;
  }

  if (error) {
    return <ErrorState error={error} onRetry={refetch} />;
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">My Products</h1>
          <p className="text-gray-600 mt-1">
            {filteredProducts.length} of {products.length} products
            {lastUpdated && (
              <span className="ml-2 text-sm">
                ‚Ä¢ Updated {lastUpdated.toLocaleTimeString()}
              </span>
            )}
          </p>
        </div>
        
        <button
          onClick={refetch}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Refresh
        </button>
      </div>

      {/* Filters */}
      {hasProducts && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <input
            type="text"
            placeholder="Search products..."
            value={searchQuery}
            onChange={(e) => {
              setSearchQuery(e.target.value);
              setCurrentPage(1);
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          
          <select
            value={selectedCategory}
            onChange={(e) => {
              setSelectedCategory(e.target.value);
              setCurrentPage(1);
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {categories.map(category => (
              <option key={category} value={category}>
                {category === 'all' ? 'All Categories' : category}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Products Grid */}
      {isEmpty ? (
        <EmptyState />
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {paginatedProducts.map((product) => (
              <ProductCard key={product._id} product={product} />
            ))}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          )}
        </>
      )}
    </div>
  );
}

// Supporting Components
const ProductsSkeleton = () => (
  <div className="p-6 max-w-7xl mx-auto">
    <div className="animate-pulse">
      <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {Array.from({ length: 8 }).map((_, i) => (
          <div key={i} className="border rounded-lg p-4">
            <div className="h-48 bg-gray-200 rounded mb-4"></div>
            <div className="h-4 bg-gray-200 rounded mb-2"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

const ErrorState = ({ error, onRetry }) => (
  <div className="p-6 max-w-2xl mx-auto text-center">
    <div className="bg-red-50 border border-red-200 rounded-lg p-6">
      <div className="text-red-600 mb-4">
        <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 className="text-lg font-semibold text-red-800 mb-2">Failed to Load Products</h3>
      <p className="text-red-600 mb-4">{error}</p>
      <button
        onClick={onRetry}
        className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
      >
        Try Again
      </button>
    </div>
  </div>
);

const EmptyState = () => (
  <div className="text-center py-12">
    <svg className="w-24 h-24 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
    </svg>
    <h3 className="text-xl font-semibold text-gray-700 mb-2">No Products Found</h3>
    <p className="text-gray-500 mb-6">Start by adding your first product to get started.</p>
    <button className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
      Add Your First Product
    </button>
  </div>
);

const ProductCard = ({ product }) => (
  <div className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
    {product.images?.[0] && (
      <img
        src={product.images[0]}
        alt={product.name}
        className="w-full h-48 object-cover"
        loading="lazy"
      />
    )}
    <div className="p-4">
      <h3 className="font-semibold text-lg mb-2 line-clamp-2">{product.name}</h3>
      <p className="text-2xl font-bold text-blue-600 mb-2">${product.price}</p>
      <p className="text-sm text-gray-500 mb-2">{product.category}</p>
      <div className="flex justify-between items-center">
        <span className={`px-2 py-1 rounded text-xs ${
          product.inStock ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
        }`}>
          {product.inStock ? 'In Stock' : 'Out of Stock'}
        </span>
        <div className="flex gap-2">
          <button className="p-2 text-gray-600 hover:text-blue-600">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </button>
          <button className="p-2 text-gray-600 hover:text-red-600">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
);

const Pagination = ({ currentPage, totalPages, onPageChange }) => (
  <div className="flex justify-center items-center gap-2 mt-8">
    <button
      onClick={() => onPageChange(currentPage - 1)}
      disabled={currentPage === 1}
      className="px-3 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
    >
      Previous
    </button>
    
    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
      <button
        key={page}
        onClick={() => onPageChange(page)}
        className={`px-3 py-2 border rounded-lg ${
          currentPage === page
            ? 'bg-blue-600 text-white border-blue-600'
            : 'border-gray-300 hover:bg-gray-50'
        }`}
      >
        {page}
      </button>
    ))}
    
    <button
      onClick={() => onPageChange(currentPage + 1)}
      disabled={currentPage === totalPages}
      className="px-3 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
    >
      Next
    </button>
  </div>
);

// 7. Optimized Next.js Configuration (next.config.js)
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Performance optimizations
  compress: true,
  poweredByHeader: false,
  
  // Image optimization
  images: {
    domains: [
      'quicklocal-backend.onrender.com',
      'res.cloudinary.com',
      'images.unsplash.com'
    ],
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },

  // Headers for security and caching
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
    ];
  },

  // API rewrites for development
  async rewrites() {
    if (process.env.NODE_ENV === 'development') {
      return [
        {
          source: '/api/:path*',
          destination: 'https://quicklocal-backend.onrender.com/api/:path*',
        },
      ];
    }
    return [];
  },

  // Environment variables
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },

  // Webpack optimizations
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Optimize bundle size
    if (!dev && !isServer) {
      config.optimization.splitChunks.chunks = 'all';
    }
    
    return config;
  },
};

module.exports = nextConfig;
